1. application.yml  프로티값 설정 ( 들여쓰기 잘 맞추는것이 yaml 문법에서 중요합니다.) 
spring: 
  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        '[format_sql]': true
logging:
  level:
    '[org.hibernate.SQL]': debug       # sql 로그 확인

2. controller ----- service ----- repository 인터페이스(dao)  
              └ dto ┘   └ entity ┘   

dto : 요청과 응답에 필요한 구성으로 만듭니다.

3. Entity
영속성 역할을 하는 데이터베이스 테이블과 직접 매핑되는 클래스
=> 엔티티를 바탕으로 테이블 생성

4. Repository 인터페이스 정의 : 스프링이 JPA 구현체를 생성하고 bean 등록

extends JpaRepository<T, ID>   인터페이스를 상속 받는다.
                                ㄴ T는 테이블과 매핑되는 엔티티, ID는 PK 타입

------  상속 받은 메소드 (따로 정의하지 않고 사용함)  -----
save(entity)	엔티티(테이블 행) 저장 또는 수정 (INSERT/UPDATE)
saveAll(컬렉션)       여러 개의 엔티티 저장 또는 수정
findById(id)	ID로 단일 엔티티 조회
findAll()		모든 엔티티 조회
deleteById(id)	ID로 엔티티 삭제
deleteAll()		전체 엔티티 삭제
existsById(id)	해당 ID의 엔티티 존재 여부 확인
count()		전체 엔티티 개수 반환
findAll(Sort sort)	정렬 조건에 따라 전체 조회
findAll(Pageable p)	페이징 처리된 전체 조회

------------------------------------------
커스텀 메소드 정의 : 메소드 이름을 해석해서 쿼리를 자동 생성합니다.
List<T> findByName(String name); // name으로 조회
List<T> findByAgeGreaterThan(int age); // age가 특정 값보다 큰 사용자 조회





